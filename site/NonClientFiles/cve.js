function AddYears() {
	var yearList = EvaluateRelevance('names of variables whose (name of it starts with "CVE20") of bes wizards whose (name of it contains "CVE")');
	yearList.reverse();
	var x = document.getElementById('cveYear');
	RemoveOptions(x);

	for (i = 0; i < yearList.length ; i++)
	{
		var option = document.createElement('option');
		option.value = yearList[i];
		option.text = yearList[i].substring(3,7);
		x.add(option);
	}						

	var option = document.createElement('option');
	option.value = 'All';
	option.text = 'All';
	x.add(option);
}

function RemoveOptions(obj) {
	if (obj == null) return;
	if (obj.options == null) return;
	while (obj.options.length > 0) {
		obj.remove(0);
	}
}

function OpenFixlets(cve)
{
	external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentCVE', cve , true);
	window.navigate('linkpage:FixletDetails');
}

function OpenComputers(cve)
{
	external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentCVE', cve, true);
	window.navigate('linkpage:ComputerDetails');
}

function SaveSettings(type)
{
	if (type == 'computers')
	{
		external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentOS', ( document.getElementById('osSelect').selectedIndex == null ? 'All' :document.getElementById('osSelect').options[document.getElementById('osSelect').selectedIndex].value ), true);
		external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentGroup', document.getElementById('cgSelect').options[document.getElementById('cgSelect').selectedIndex].value, true );
		external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentComputerSearch', (document.getElementById('searchComputer').value == '' ? '' : document.getElementById('searchComputer').value), true);
	}
	else if (type == 'cves')
	{
		external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentYear', document.getElementById('cveYear').options[document.getElementById('cveYear').selectedIndex].value, true);
		external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentScore', document.getElementById('scoreSelect').options[document.getElementById('scoreSelect').selectedIndex].value, true );
		external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentComputerCnt', (document.getElementById('numComp').value == '' ? '1' : document.getElementById('numComp').value), true);
		external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentSearch', (document.getElementById('searchInput').value == '' ? '' : document.getElementById('searchInput').value), true);
	}
}

function RestoreSettings (type)
{
	if (type == 'computers')
	{
		document.getElementById('osSelect').value = (EvaluateRelevance('(value of private variable whose (name of it = "CurrentOS") of current wizard | "All")'));
		document.getElementById('cgSelect').value = (EvaluateRelevance('(value of private variable whose (name of it = "CurrentGroup") of current wizard | "All")'));
		document.getElementById('searchComputer').value = (EvaluateRelevance('(value of private variable whose (name of it = "CurrentComputerSearch") of current wizard | "")'));
	}
	else if (type == 'cves')
	{
		document.getElementById('cveYear').value = (EvaluateRelevance('(value of private variable whose (name of it = "CurrentYear") of current wizard | "CVE2010")'));
		document.getElementById('scoreSelect').value = (EvaluateRelevance('(value of private variable whose (name of it = "CurrentScore") of current wizard | "9.0")'));
		document.getElementById('numComp').value = (EvaluateRelevance('(value of private variable whose (name of it = "CurrentComputerCnt") of current wizard | "1")'));
		document.getElementById('searchInput').value = (EvaluateRelevance('(value of private variable whose (name of it = "CurrentSearch") of current wizard | "")'));
	}
}

/*
function complianceColor(val) {
	if (val > 75) {
		return '<span style="color:#cc3333;">' + val + '%</span>';
	} else if (val > 50 && val <= 75) {
		return '<span style="color:#ff7f50;">' + val + '%</span>';
	} else if (val > 25 && val <= 50) {
		return '<span style="color:#15428b;">' + val + '%</span>';
	} else if (val >= 0 && val <= 25) {
		return '<span style="color:#008800;">' + val + '%</span>';
	} else {
		return '<span style="color:008800;">' + val + '</span>';
	}
}
*/

function complianceColor(val) {
	
	// return '<span style="color:#212121;">' + val + '%</span>';
	
	if (val > 75) {
		return '<span style="color:#008800;"><b>' + val + '%</b></span>';
	} else if (val > 50 && val <= 75) {
		return '<span style="color:#15428b;"><b>' + val + '%</b></span>';
	} else if (val > 25 && val <= 50) {
		return '<span style="color:#ff7f50;"><b>' + val + '%</b></span>';
	} else if (val >= 0 && val <= 25) {
		return '<span style="color:#cc3333;"><b>' + val + '%</b></span>';
	} else {
		return '<span style="color:#cc3333;"><b>' + val + '</b></span>';
	}
}

function complianceBgColor(val) {
	if (val > 75) {
		// return '#008800';
		return '#E5FFE5';
	} else if (val > 50 && val <= 75) {
		// return '#15428b';
		return '#E1FFFF';
	} else if (val > 25 && val <= 50) {
		// return '#ff7f50';
		return '#FFFFE9';
	} else if (val >= 0 && val <= 25) {
		// return '#cc3333';
		return '#FFE6E6';
	} else {
		// return '#cc3333';
		return '#FFE6E6';
	}
}

function cveScoreColor(val) {
	if (val >= 9.0) {
		return '<span style="color:#cc3333;">' + val + '</span>';
	} else if (val >= 7.0 && val <= 8.9) {
		return '<span style="color:#ff7f50;">' + val + '</span>';
	} else if (val >= 4.0 && val <= 6.9) {
		return '<span style="color:#15428b;">' + val + '</span>';
	} else if (val >= 0.1 && val <= 3.9) {
		return '<span style="color:#008800;">' + val + '</span>';
	} else {
		return '<span style="color:008800;">' + val + '</span>';
	}
}

function cumScoreColor(highestScore, currentRow, currentCol) {
	var current = parseInt(currentRow.cells[currentCol].innerHTML);
	var high = parseInt(highestScore);
	if (current >= high*0.75) 
	{
		currentRow.cells[currentCol].style.color = '#cc3333';
		// currentRow.cells[currentCol].style.fontWeight = 'bold';
	} else if (current >= high*0.5 && current < high*0.75)
	{
		currentRow.cells[currentCol].style.color = '#ff7f50';
		// currentRow.cells[currentCol].style.fontWeight = 'bold';
	} else if (current >= high*0.25 && current < high*0.5)
	{
		currentRow.cells[currentCol].style.color = '#15428b';
		// currentRow.cells[currentCol].style.fontWeight = 'bold';
	} else if (current < high*0.25)
	{
		currentRow.cells[currentCol].style.color = '#008800';
		// currentRow.cells[currentCol].style.fontWeight = 'bold';
	}
}

function RiskScoreColor(highestScore, currentRow, currentCol) {
	var current = parseInt(currentRow.cells[currentCol].innerHTML);
	var high = parseInt(highestScore);
	if (current >= high*0.75) 
	{
		currentRow.cells[currentCol].style.color = '#cc3333';
		// currentRow.cells[currentCol].style.fontWeight = 'bold';
	} else if (current >= high*0.5 && current < high*0.75)
	{
		currentRow.cells[currentCol].style.color = '#ff7f50';
		// currentRow.cells[currentCol].style.fontWeight = 'bold';
	} else if (current >= high*0.25 && current < high*0.5)
	{
		currentRow.cells[currentCol].style.color = '#15428b';
		// currentRow.cells[currentCol].style.fontWeight = 'bold';
	} else if (current < high*0.25)
	{
		currentRow.cells[currentCol].style.color = '#008800';
		// currentRow.cells[currentCol].style.fontWeight = 'bold';
	}
}

function filter (phrase, _id){
	if (phrase.value.length > 0 && phrase.value.length < 4) return;
	var words = phrase.value.toLowerCase().split(" ");
	var table = document.getElementById(_id); var ele; var cnt = 0; 
	for (var r = 1; r < table.rows.length; r++){
		ele = table.rows[r].innerHTML.replace(/<[^>]+>/g,"");
			var displayStyle = 'none';
			for (var i = 0; i < words.length; i++) {
				if (ele.toLowerCase().indexOf(words[i])>=0) { displayStyle = ''; }
				else { displayStyle = 'none'; break; } }
		table.rows[r].style.display = displayStyle;
		if (displayStyle == '')	cnt++; }
	document.getElementById('cveCount').innerHTML = cnt + ' of ' + (table.rows.length - 1) + ' items';
}

function PrintDoc() {
	window.print();
}


function ExcelInstalled() {
	tester = null;
	try {
		tester = new ActiveXObject('Excel.Application');
	}
	catch (e) {
	}

	if (tester) {
		return true;
	}
	return false;
}

function XLSExport(tableName) {
	if (ExcelInstalled() == false)
	{
		VbAlert('Error calling ActiveXObject(Excel.Application)', 'Microsoft Excel is not installed on this computer.');
		return;
	}
	
	// Start Excel and get Application object.
	var oXL = new ActiveXObject('Excel.Application');
	oXL.Visible = true;
	  
	// Get a new workbook.
	var oWB = oXL.Workbooks.Add();
	var oSheet = oWB.ActiveSheet;
																 
	// Create an array to set multiple values at once.
	// Fill an array of values (from VBScript).
	var numRow;
	if (tableName == 'cvetable')
	{
		numRows = document.getElementById('cveCount').innerHTML;
		numRows = parseInt(numRows.substring(0, numRows.indexOf(' '))) + 2;
	}
	else if (tableName == 'computertable')
	{
		numRows = document.getElementById('computerCount').innerHTML;
		numRows = parseInt(numRows.substring(0, numRows.indexOf(' '))) + 2;
	}
	else if (tableName == 'fixletdetails')
	{
		numRows = document.getElementById('fixletdetails').rows.length + 1;
	}
	else if (tableName == 'computerdetails')
	{
		numRows = document.getElementById('computerdetails').rows.length + 1;
	}

	var numCol = parseInt(document.getElementById(tableName).rows[0].cells.length);
	var chr = String.fromCharCode(64 + numCol);
	var chrMinus = String.fromCharCode(63 + numCol);
	oSheet.Range('A2', chr + numRows ).Value = CreateTableArray(tableName);

	// Format header as bold, vertical alignment = center.
	oSheet.Range('A2', chr + '2').Font.Bold = true;
	oSheet.Range('A2', chr + '2').Font.Size = 14;
	oSheet.Range('A2', chr + '2').Interior.ColorIndex = 15;

	oSheet.Range('A2', chr + numRows).VerticalAlignment =  -4108; //xlVAlignCenter
	
	// Create Filters
	oSheet.Range('A2', chr + numRows).AutoFilter;
	
	// AutoFit columns 
	oSheet.Range('A2', chr + numRows).EntireColumn.AutoFit();
	
	if (tableName == 'cvetable')
	{
		oRng = oSheet.Range(chr + '2', chr + numRows);
		oRng.ColumnWidth = 120;
		oRng.WrapText = true;
	}
}

function CSVExport(tableName) {
	try {
		var outputStr = '';
		var table = document.getElementById(tableName);

		// This is for the header row
		for (i = 0; i < 1; i++) {
			var rowStr = '';
			for (j = 0; j < table.rows[i].cells.length; j++) {
				cellValue = table.rows[i].cells[j].innerHTML.replace('<BR>',' ');
				cellValue = cellValue.replace(/(<([^>]+)>)/ig,'');
				cellValue = cellValue.replace('&nbsp;5', '');
				cellValue = cellValue.replace('&nbsp;6', '');
				rowStr += cellValue + '\t';
		   }  
			outputStr += rowStr + '\r\n';
		}	
		
		// Rest of the table
		for (i = 1; i < table.rows.length; i++) {
			if (table.rows[i].style.display == 'none')
				continue;
			var rowStr = '';
			for (j = 0; j < table.rows[i].cells.length; j++) {
				cellValue = table.rows[i].cells[j].innerHTML.replace('<BR>',', ');
				rowStr += cellValue.replace(/(<([^>]+)>)/ig,'') + '\t';
		   }  
			outputStr += rowStr + '\r\n';
		}	

		var FileDate = new Date();
		var FileDateString;
		FileDate.setDate(FileDate.getDate());
		FileDateString = 	FileDate.getFullYear() +
						('0' + (FileDate.getMonth()+1)).slice(-2) +
						('0' + FileDate.getDate()).slice(-2) + '_' +
						('0' + FileDate.getHours()).slice(-2) + 
						('0' + FileDate.getMinutes()).slice(-2);

		shell = new ActiveXObject('WScript.Shell');
		pathToMyDocuments = shell.SpecialFolders('MyDocuments');
		var FileOpener = new ActiveXObject('Scripting.FileSystemObject');
		var fileName = pathToMyDocuments + '\\' + tableName + '_' + FileDateString + '.csv';
		var FilePointer = FileOpener.CreateTextFile(fileName, 8, true);
		FilePointer.WriteLine(outputStr);
		FilePointer.Close();
		VbAlert('Export successful', 'CSV exported to file ' + fileName);
	}
	catch (err) {
		VbAlert('Error in CSV export', err.message);
	}
}

function Zoom ( choice )
{
	try
	{
		var zoom = parseInt(document.body.style.zoom);
		
		if (isNaN(zoom))
			zoom = 100;
		
		switch (choice)
		{
			case 'In':
				document.body.style.zoom = zoom + 10 + '%';
				break;
			case 'Out':
				document.body.style.zoom = zoom - 10 + '%';
				break;
			case 'Normal':
				document.body.style.zoom = '100%';
				break;
			case 'Restore':
				document.body.style.zoom = (EvaluateRelevance('(value of private variable whose (name of it = "CurrentZoom") of current wizard | "100%25")'));	
				if (document.getElementById('CurrentZoom'))
					document.getElementById('CurrentZoom').innerHTML = document.body.style.zoom;
				break;
		}		
		
		if (document.getElementById('CurrentZoom'))
			document.getElementById('CurrentZoom').innerHTML = document.body.style.zoom;
		external.StoreVariable( EvaluateRelevance('dashboard id of current wizard'), 'CurrentZoom', document.body.style.zoom, true);
	}
	catch (err)
	{
		VbAlert('Error in zoom function', err.message);
	}
}

function getElementsByClassName(className) {
  var found = [];
  var elements = document.getElementsByTagName("*");
  for (var i = 0; i < elements.length; i++) {
    var names = elements[i].className.split(' ');
    for (var j = 0; j < names.length; j++) {
      if (names[j] == className) found.push(elements[i]);
    }
  }
  return found;
}

function ViewSummary() {
	try {
		imgName = document.getElementById('ViewSummary').src;
		imgName = imgName.substring(imgName.indexOf('cve-view'));
		var summaryCell = getElementsByClassName('view-ellipsis');

		if (imgName == 'cve-viewmore.png')
		{
			document.getElementById('ViewSummary').src = 'cve-viewless.png';
			document.getElementById('ViewImage').title = 'Minimize summary description';
			for (var i = 0 ; i < summaryCell.length ; i++) {
				summaryCell[i].style.textOverflow = "clip";
				summaryCell[i].style.whiteSpace = "normal";
				summaryCell[i].style.overflow = "visible";
			}
		}
		else
		{
			document.getElementById('ViewSummary').src = 'cve-viewmore.png';
			document.getElementById('ViewImage').title = 'View complete summary description';
			for (var i = 0 ; i < summaryCell.length ; i++) {
				summaryCell[i].style.textOverflow = "ellipsis";
				summaryCell[i].style.whiteSpace = "nowrap";
				summaryCell[i].style.overflow = "hidden";
			}
		}
	}
	catch (err) {
		VbAlert('Error processing view summary', err.message);
	}
}

function TimeStamp() {
	try {
		var ts = EvaluateRelevance('(value of variable whose (name of it = "CVETimeStamp") of current wizard | "None")');
		if (ts == 'None')
		{
			document.getElementById('TimeStamp').innerHTML = 'No data imported';
			document.getElementById('msg').style.display = 'block';
		}
		else
		{
			document.getElementById('TimeStamp').innerHTML = 'Data imported: ' + ts;
		}
	}
	catch (err) {
		VbAlert ('Error retrieving timestamp', err.message);
	}
}
