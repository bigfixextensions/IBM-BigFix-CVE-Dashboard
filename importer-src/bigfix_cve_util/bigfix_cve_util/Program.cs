using System;
using System.Collections.Generic;
using System.Net;
using System.IO;
using System.Diagnostics;
using System.Xml;
using System.Xml.Linq;
using System.IO.Compression;
using System.Threading;
using System.Linq;

namespace bigfix_cve_util
{
    class Program
    {
        static string workingPath = "";
        static Int32 maxLogFileSize = 1048576; // 1MB
        static String username = null;
        static String password = null;
        static String server = "";
        static String port = "";
        static String serverURL = "";
        static String dashboardURL = "/api/dashboardvariables/CVEs.ojo";
        static String debug = "no";
        static List<Computer> ComputerList = new List<Computer>();

        static int batch = 10;
        static int slowdown = 7771;
        static int noOfYears = 8;

        static void Main(string[] args)
        {
            try
            {
                Arguments CommandLine = new Arguments(args);

                if (CommandLine["server"] != null)
                    server = CommandLine["server"];
                else {
                    server = "localhost";
                }

                if (CommandLine["port"] != null)
                    port = CommandLine["port"];
                else {
                    port = "52311";
                }

                if (CommandLine["username"] != null) username = CommandLine["username"];
                else { AddtoLogFile("\r\nParameter username is required\r\n"); showHelp(); }

                if (CommandLine["password"] != null)
                    password = CommandLine["password"];
                else if (Environment.GetEnvironmentVariable("cve_util_cre") != null)
                    password = Environment.GetEnvironmentVariable("cve_util_cre");
                else {
                    string pass = "";
                    Console.Write("Enter your password: ");
                    ConsoleKeyInfo key;

                    do
                    {
                        key = Console.ReadKey(true);

                        if (key.Key != ConsoleKey.Backspace && key.Key != ConsoleKey.Enter)
                        {
                            pass += key.KeyChar;
                            Console.Write("*");
                        }
                        else
                        {
                            if (key.Key == ConsoleKey.Backspace && pass.Length > 0)
                            {
                                pass = pass.Substring(0, (pass.Length - 1));
                                Console.Write("\b \b");
                            }
                        }
                    }
                    while (key.Key != ConsoleKey.Enter);

                    Console.WriteLine();
                    password = pass;
                }

                if (CommandLine["batch"] != null)
                {   batch = Convert.ToInt32(CommandLine["batch"]); }

                if (CommandLine["slowdown"] != null)
                { slowdown = Convert.ToInt32(CommandLine["slowdown"]); }

                if (CommandLine["years"] != null)
                { noOfYears = Convert.ToInt32(CommandLine["years"]); }

                if (CommandLine["debug"] != null)
                { debug = CommandLine["debug"]; }

                Version version = System.Reflection.Assembly.GetEntryAssembly().GetName().Version;
                AddtoLogFile("Running bigfix_cve_util version: " + version.ToString());

                foreach (SecurityProtocolType protocol in SecurityProtocolType.GetValues(typeof(SecurityProtocolType)))
                {
                    switch (protocol)
                    {
                        case SecurityProtocolType.Ssl3:
                        case SecurityProtocolType.Tls:
                        default:
                            ServicePointManager.SecurityProtocol |= protocol;
                            break;
                    }
                }

                String testResults = GetRESTApi("https://" + server + ":" + port + "/api/login");
                AddtoLogFile("Connected to BigFix Server successfully");

                int currentYear = DateTime.Now.Year;
                string[] years = new string[noOfYears];

                for (int n = 0; n < noOfYears; n++)
                {
                    years[n] = (currentYear - n).ToString();
                }

                Stopwatch totalTime = new Stopwatch();
                totalTime.Start();

                // DeleteRESTApi("https://" + server + ":" + port + "/api/dashboardvariables/CVEs.ojo");
                // AddtoLogFile("Removed all previously loaded data");

                /* We always want to have fresh content
                 * when it comes to this year's CVE data. */
                prepareCVEcontent(years[0], (downloadURL, downloadGZFile) =>
                {
                    AddtoLogFile("Downloading GZ file: " + downloadURL);
                    WebClient webClient = new WebClient();
                    webClient.DownloadFile(downloadURL, downloadGZFile);
                    AddtoLogFile("Downloading completed");
                });

                for (int i = 1; i < years.Length; i++)
                {
                    /* Cashing data from previous years is fine. */
                    prepareCVEcontent(years[i], (downloadURL, downloadGZFile) =>
                    {
                        if (File.Exists(downloadGZFile))
                        {
                            AddtoLogFile("Found file " + downloadGZFile + " locally");
                        }
                        else
                        {
                            AddtoLogFile("Downloading GZ file: " + downloadURL);
                            WebClient webClient = new WebClient();
                            webClient.DownloadFile(downloadURL, downloadGZFile);
                            AddtoLogFile("Downloading completed");
                        }
                    });
                }

                PostRESTApi(serverURL, GenComputerXML(), "ComputerList");

                PostRESTApi(serverURL, GenTimeStamp(), "TimeStamp");

                totalTime.Stop();
                TimeSpan tsTotal = totalTime.Elapsed;
                string totalElapsedTime = String.Format("{0:00} hours {1:00} mins {2:00} secs", tsTotal.Hours, tsTotal.Minutes, tsTotal.Seconds);
                AddtoLogFile("Finished all runs - " + totalElapsedTime);

            }
            catch (Exception ex)
            {
                AddtoLogFile("Error: " + ex.Message);
            }
        }

        static void prepareCVEcontent(string year, Action <string, string> downloadIfRequired)
        {
            string downloadURL = "http://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-" + year + ".xml.gz";
            string downloadGZFile = downloadURL.Substring(downloadURL.LastIndexOf("/") + 1);
            FileInfo gzFile = new FileInfo(downloadGZFile);
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            downloadIfRequired(downloadURL, downloadGZFile);

            AddtoLogFile("File name: " + downloadGZFile + ", Size: " + BytesToString(gzFile.Length));

            AddtoLogFile("Decompressing file");
            Decompress(gzFile);

            AddtoLogFile("Starting XML processing");
            XmlDocument d = new XmlDocument();
            d.Load(downloadGZFile.Remove(downloadGZFile.Length - gzFile.Extension.Length));

            RemoveNodes(d, "//vuln:vulnerable-configuration");
            RemoveNodes(d, "//vuln:vulnerable-software-list");
            RemoveNodes(d, "//vuln:references");
            RemoveNodes(d, "//vuln:last-modified-datetime");
            RemoveNodes(d, "//vuln:cwe");

            RemoveNodes(d, "//cvss:access-vector");
            RemoveNodes(d, "//cvss:access-complexity");
            RemoveNodes(d, "//cvss:authentication");
            RemoveNodes(d, "//cvss:confidentiality-impact");
            RemoveNodes(d, "//cvss:integrity-impact");
            RemoveNodes(d, "//cvss:availability-impact");
            RemoveNodes(d, "//cvss:source");
            RemoveNodes(d, "//cvss:generated-on-datetime");

            RemoveNodes(d, "//vuln:assessment_check");
            RemoveNodes(d, "//vuln:scanner");

            AddNodes(d);

            /*
            foreach (var computer in ComputerList)
            {
                AddtoLogFile(computer.Name + " - " + computer.RiskScore.ToString());
            }
            */

            string body = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><BESAPI><DashboardData><Dashboard>CVEs.ojo</Dashboard><Name>CVE" + year + "</Name><IsPrivate>false</IsPrivate><Value><![CDATA[XXREPLACEXX]]></Value></DashboardData></BESAPI>";
            body = body.Replace("XXREPLACEXX", d.OuterXml);
            body = body.Replace(@"\", @"\\");
            body = body.Replace("'", @"\'");
            body = body.Replace("&lt;table&gt;", @" table ");
            body = body.Replace("&lt;ruby&gt;", @" ruby ");

            serverURL = "https://" + server + ":" + port + dashboardURL;
            PostRESTApi(serverURL, body, year.ToString());

            stopWatch.Stop();
            TimeSpan ts = stopWatch.Elapsed;
            string elapsedTime = string.Format("{0:00} hours {1:00} mins {2:00} secs", ts.Hours, ts.Minutes, ts.Seconds);
            AddtoLogFile("Completed - " + elapsedTime);
        }

        static public void AddtoLogFile(string Message)
        {
            string filename = Path.Combine(workingPath, "bigfix_cve_util.log");
            string filepath = filename;
            if (File.Exists(filepath))
            {
                // Prevents log from getting too large. Remove after 1MB
                if (new FileInfo(filename).Length > maxLogFileSize)
                    File.WriteAllText(filename, String.Empty);

                using (StreamWriter writer = new StreamWriter(filepath, true))
                {
                    writer.WriteLine(DateTime.Now + " - " + Message);
                }
            }
            else
            {
                StreamWriter writer = File.CreateText(filepath);
                writer.WriteLine(DateTime.Now + " - " + Message);
                writer.Close();
            }
            Console.WriteLine(Message);
        }

        static public void showHelp()
        {
            Version version = System.Reflection.Assembly.GetEntryAssembly().GetName().Version;

            AddtoLogFile("Running bigfix_cve_util version: " + version.ToString());

            Console.WriteLine("");
            Console.WriteLine("Name: ");
            Console.WriteLine("\tbigfix_cve_util.exe version: " + version.ToString());
            Console.WriteLine("");
            Console.WriteLine("Synopsis:");
            Console.WriteLine("\tbigfix_cve_util.exe [Parameters]");
            Console.WriteLine("");

            Console.WriteLine("Parameters (Required):");
            Console.WriteLine("\t-username=<BigFix admin user>");
            Console.WriteLine("");

            Console.WriteLine("Parameters (Optional):");
            Console.WriteLine("\t-password=<BigFix admin password>");
            Console.WriteLine("\t-server=<BigFix Root Server DNS Name or IP, defaults to localhost>");
            Console.WriteLine("\t-port=<BigFix Server port, defaults to 52311>");
            Console.WriteLine("\t-years=<Number of years backwards (inclusive) to import, defaults to 8>");
            Console.WriteLine("");

            Console.WriteLine("Parameters (Debugging):");
            Console.WriteLine("\t-debug=<yes or no, default is no>");
            Console.WriteLine("\t-batch=<Integer number, default is 10>");
            Console.WriteLine("\t-slowdown=<Milliseconds slowdown between each batch, default is none>");
            Console.WriteLine("");

            Console.WriteLine("Contact:");
            Console.WriteLine("\tFor any questions or issues, follow this URL: ");
            Console.WriteLine("\thttps://forum.bigfix.com/t/cve-dashboard-extension/23158");

            Environment.Exit(0);
        }

        static public void Decompress(FileInfo fileToDecompress)
        {
            using (FileStream originalFileStream = fileToDecompress.OpenRead())
            {
                string currentFileName = fileToDecompress.FullName;
                string newFileName = currentFileName.Remove(currentFileName.Length - fileToDecompress.Extension.Length);

                using (FileStream decompressedFileStream = File.Create(newFileName))
                {
                    using (GZipStream decompressionStream = new GZipStream(originalFileStream, CompressionMode.Decompress))
                    {
                        decompressionStream.CopyTo(decompressedFileStream);
                        AddtoLogFile("Decompress completed");
                        FileInfo newFileInfo = new FileInfo(newFileName);
                        AddtoLogFile("File name: " + newFileName + ", Size: " + BytesToString(newFileInfo.Length));

                    }
                }
            }
        }

        static String BytesToString(long byteCount)
        {
            string[] suf = { "B", "KB", "MB", "GB", "TB", "PB", "EB" }; //Longs run out around EB
            if (byteCount == 0)
                return "0" + suf[0];
            long bytes = Math.Abs(byteCount);
            int place = Convert.ToInt32(Math.Floor(Math.Log(bytes, 1024)));
            double num = Math.Round(bytes / Math.Pow(1024, place), 1);
            return (Math.Sign(byteCount) * num).ToString() + suf[place];
        }

        static public void AddNodes(XmlDocument doc)
        {
            var nsmgr = new XmlNamespaceManager(doc.NameTable);
            nsmgr.AddNamespace("vuln", "http://scap.nist.gov/schema/vulnerability/0.4");
            nsmgr.AddNamespace("cvss", "http://scap.nist.gov/schema/cvss-v2/0.2");
            nsmgr.AddNamespace("xx", "http://scap.nist.gov/schema/feed/vulnerability/2.0");
            XmlNodeList els = doc.SelectNodes("//vuln:cve-id", nsmgr);

            int c = 1;
            int interation = 1;
            int mainCounter = 0;
            string getCountURL = "https://" + server + ":" + port + "/api/query?relevance=";

            for (int i = 0; i < els.Count; i++)
            {

                getCountURL += "(%22" + i.ToString() + "~~%22 %26 (it as string) of number of elements of it %26 %22~~%22 %26 (it as string) of number of elements of unions of applicable computer sets of elements of it %26 %22^^%22 %26 (if (exists sources of elements of it) then (concatenation %22%3Cbr%2F%3E%22 of unique values of sources of elements of it) else (%22None%22)) %26 %22^^%22 %26 (it as string) of number of elements of sets of subscribed computers of elements of sets of sites of elements of it %26 %22``%22 %26 (if (number of elements of unions of applicable computer sets of elements of it = 0) then (%220%22) else (concatenation %22, %22 of (((it as string) of id of it) %26 %22!!1%22 %26 (name of it | %22N%2FA%22) %26 %22!!2%22 %26 (operating system of it | %22N%2FA%22) %26 %22!!3%22 %26 (concatenation %22%3Cbr%2F%3E%22 of (it as string) of ip addresses of it | %22N%2FA%22) %26 %22!!4%22 %26 (device type of it | %22N%2FA%22) %26 %22!!5%22 %26	(concatenation %22%3Cbr%2F%3E%22 of unique values of names of bes computer groups of it | %22N%2FA%22)) of elements of unions of applicable computer sets of elements of it))) of sets of bes fixlets whose (cve id list of it contains %22" + els[i].InnerText + "%22)%3B ";

                // AddtoLogFile(getCountURL);

                if (interation == batch || i == els.Count - 1)
                {
                    if (slowdown != 7771)
                    {
                        Thread.Sleep(slowdown);
                    }

                    // AddtoLogFile(getCountURL.Remove(getCountURL.Length - 4));

                    string queryResults = GetRESTApi(getCountURL.Remove(getCountURL.Length - 4));

                    // string queryResults = File.ReadAllText(@"disney.log");

                    AddtoLogFile("Processed " + c + " of " + els.Count + ": " + els[mainCounter].InnerText);
                    XDocument xdoc = XDocument.Parse(queryResults);
                    var list = xdoc.Root.Element("Query").Element("Result").Elements("Answer").Select(element => element.Value).ToList();
                    string[] resString = list.ToArray();

                    // AddtoLogFile(queryResults);

                    for (int j = 0; j < interation; j++)
                    {
                        XmlElement fixletElem = doc.CreateElement("vuln:fixlets");
                        XmlElement computerElem = doc.CreateElement("vuln:computers");
                        XmlElement sourceElem = doc.CreateElement("vuln:source");
                        XmlElement totalSubcribedElem = doc.CreateElement("vuln:totalsubscribed");

                        mainCounter = Convert.ToInt32(resString[j].Substring(0, resString[j].IndexOf("~~")));
                        fixletElem.InnerText = resString[j].Substring(resString[j].IndexOf("~~") + 2, resString[j].LastIndexOf("~~") - resString[j].IndexOf("~~") - 2);
                        computerElem.InnerText = resString[j].Substring(resString[j].LastIndexOf("~~") + 2, resString[j].IndexOf("^^") - resString[j].LastIndexOf("~~") - 2);
                        sourceElem.InnerText = resString[j].Substring(resString[j].IndexOf("^^") + 2, resString[j].LastIndexOf("^^") - resString[j].IndexOf("^^") - 2);
                        totalSubcribedElem.InnerText = resString[j].Substring(resString[j].LastIndexOf("^^") + 2, resString[j].LastIndexOf("``") - resString[j].LastIndexOf("^^") - 2);

                        char[] separatingChars = { ',' };
                        string[] idList = resString[j].Substring(resString[j].LastIndexOf("``") + 2).Split(separatingChars);

                        if (fixletElem.InnerText == "0")
                        {
                            if (debug.ToLower() == "yes")
                                AddtoLogFile("\tRemoving CVE with no BigFix Fixlets associated - " + els[mainCounter].InnerText);
                            XmlNode nd = doc.SelectSingleNode("//xx:entry[@id='" + els[mainCounter].InnerText + "']", nsmgr);
                            nd.ParentNode.RemoveChild(nd);
                        }
                        else
                        {
                            try
                            {
                                if (computerElem.InnerText != "0")
                                {
                                    for (int n = 0; n < idList.Length; n++)
                                    {
                                        Computer result = ComputerList.Find(x => x.Id == idList[n].Substring(0, idList[n].IndexOf("!!1")).Trim());
                                        if (result == null)
                                        {
                                            ComputerList.Add(new Computer(
                                                idList[n].Substring(0, idList[n].IndexOf("!!1")).Trim(),
                                                idList[n].Substring(idList[n].IndexOf("!!1") + 3, idList[n].IndexOf("!!2") - idList[n].IndexOf("!!1") - 3),
                                                idList[n].Substring(idList[n].IndexOf("!!2") + 3, idList[n].IndexOf("!!3") - idList[n].IndexOf("!!2") - 3),
                                                idList[n].Substring(idList[n].IndexOf("!!3") + 3, idList[n].IndexOf("!!4") - idList[n].IndexOf("!!3") - 3),
                                                idList[n].Substring(idList[n].IndexOf("!!4") + 3, idList[n].IndexOf("!!5") - idList[n].IndexOf("!!4") - 3),
                                                idList[n].Substring(idList[n].IndexOf("!!5") + 3),
                                                Convert.ToDecimal(els[mainCounter].NextSibling.NextSibling.FirstChild.FirstChild.InnerText)
                                                ));
                                        }
                                        else
                                        {
                                            result.RiskScore = result.RiskScore + Convert.ToDecimal(els[mainCounter].NextSibling.NextSibling.FirstChild.FirstChild.InnerText);
                                        }
                                    }

                                }
                                els[mainCounter].ParentNode.AppendChild(fixletElem);
                                els[mainCounter].ParentNode.AppendChild(computerElem);
                                els[mainCounter].ParentNode.AppendChild(sourceElem);
                                els[mainCounter].ParentNode.AppendChild(totalSubcribedElem);
                                if (debug.ToLower() == "yes")
                                    AddtoLogFile("\tAdding CVE - " + els[mainCounter].InnerText);

                            }
                            catch 
                            {
                                if (debug.ToLower() == "yes")
                                    AddtoLogFile("\tRemoving CVE with no CVSS Score - " + els[mainCounter].InnerText);
                                XmlNode nd = doc.SelectSingleNode("//xx:entry[@id='" + els[mainCounter].InnerText + "']", nsmgr);
                                nd.ParentNode.RemoveChild(nd);
                            }
                        }
                    }
                    getCountURL = "https://" + server + ":" + port + "/api/query?relevance=";
                    interation = 0;
                }

                interation++;
                c++;
            }
        }

        static public void RemoveNodes(XmlDocument doc, String node)
        {
            var nsmgr = new XmlNamespaceManager(doc.NameTable);
            nsmgr.AddNamespace("vuln", "http://scap.nist.gov/schema/vulnerability/0.4");
            nsmgr.AddNamespace("cvss", "http://scap.nist.gov/schema/cvss-v2/0.2");
            XmlNodeList els = doc.SelectNodes(node, nsmgr);
            foreach (XmlNode n in els)
            {
                n.ParentNode.RemoveChild(n);
            }
            AddtoLogFile("Removed " + els.Count.ToString() + " items of " + node);
        }

        static public String GenComputerXML()
        {
            String cXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><BESAPI><DashboardData><Dashboard>CVEs.ojo</Dashboard><Name>CVEComputers</Name><IsPrivate>false</IsPrivate><Value><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?><computers>";
            List<Computer> SortedList = ComputerList.OrderByDescending(o => o.RiskScore).ToList();
            foreach (Computer c in SortedList)
            {
                cXml += "<computer><id>" + c.Id.Trim() + "</id>";
                cXml += "<name>" + c.Name + "</name>";
                cXml += "<os>" + c.Os + "</os>";
                cXml += "<ip>" + c.Ip.Replace("<", "&lt;").Replace(">", "&gt;") + "</ip>";
                cXml += "<devicetype>" + c.DeviceType + "</devicetype>";
                cXml += "<riskscore>" + c.RiskScore + "</riskscore>";
                cXml += "<cg>" + c.ComputerGroup.Replace("<", "&lt;").Replace(">", "&gt;") + "</cg></computer>";
            }
            cXml += "</computers>]]></Value></DashboardData></BESAPI>";
            return cXml;
        }

        static public String GenTimeStamp()
        {
            DateTime dt = DateTime.Now;
            String dtString = String.Format("{0:yyyy-MM-dd HH:mm:ss zzz}", dt);

            String cXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
                "<BESAPI><DashboardData>" + 
                "<Dashboard>CVEs.ojo</Dashboard>" + 
                    "<Name>CVETimeStamp</Name>" + 
                    "<IsPrivate>false</IsPrivate>" + 
                    "<Value>" + dtString + "</Value>" + 
                 "</DashboardData></BESAPI>";
            return cXml;
        }

        static public void PostRESTApi(String URL, String data, String tag)
        {
            var restClient = new RestClient(URL);
            restClient.Method = HttpVerb.POST;
            restClient.PostData = data;
            var results = restClient.MakeRequest(username + ":" + password);
            AddtoLogFile("Posted " + tag + " to BigFix via the REST API");
            AddtoLogFile("REST API URL: " + URL);
        }

        static public String GetRESTApi(String URL)
        {
            var restClient = new RestClient(URL);
            restClient.Method = HttpVerb.GET;
            var results = restClient.MakeRequest(username + ":" + password);
            return results.ToString();
        }

        static public String DeleteRESTApi(String URL)
        {
            try
            {
                var restClient = new RestClient(URL);
                restClient.Method = HttpVerb.DELETE;
                var results = restClient.MakeRequest(username + ":" + password);
                return results.ToString();
            }
            catch (Exception ex)
            {
                AddtoLogFile("Info: No previous dashboard data to clean up");
                return ex.Message;
            }
        }

    }
}
